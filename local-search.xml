<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++向Java变现的读书笔记</title>
    <link href="/2020/06/26/C++%E5%90%91Java%E5%8F%98%E7%8E%B0%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/26/C++%E5%90%91Java%E5%8F%98%E7%8E%B0%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="C-向Java变现的读书笔记"><a href="#C-向Java变现的读书笔记" class="headerlink" title="C++向Java变现的读书笔记"></a>C++向Java变现的读书笔记</h2><p>以下根据阅读&lt;Java核心技术 中文版 9th 卷一 &gt;</p><p>整理了C++与Java的异同还有我在C++中没见过的东西, </p><p>方便我自己梳理与查阅 :D</p><p><del>这几天速成过程也很邋遢, 可能有一些很傻的错误</del></p><p>而且书还没读完, 变现还没成功, 后面应该会继续补</p><p> <font color=gray size=2><em>以下分点顺序大概是按照Java大部分书籍板块顺序来进行的</em></font></p><hr><ol><li><p>源代码文件名<strong>必须</strong>与公共类名相同<br>main方法<strong>必须</strong>声明为public  <br>main方法<strong>必须</strong>有一个外壳类<br>main方法<strong>必须</strong>是静态的</p></li><li><p>Java中的类型可以分为<br><strong>primitive type</strong><br><strong>reference to objects</strong></p></li><li><p>Java中多了一种文档注释, 以<strong>/**</strong>开头, <strong>*/</strong>结束</p></li><li><p>Java中int范围与机器无关</p></li><li><p>Ob开头-&gt;二进制</p></li><li><p>建议不要用char <font color=gray size=2><em>(Java核心技术卷一  中文版  9th p36)</em></font></p></li><li><p>boolean不能和int相互转换<br>不要对boolean进行强制类型转换</p></li><li><p>const是Java未使用的保留关键字, 常量的关键字是 <em>static final</em> </p></li><li><p>Java字符串就是Unicode字符序列<br>和C++一样, Java无内置的字符串类型<br>但标准库中提供了一个predefined class -&gt;<strong>String</strong></p></li><li><p>String类不提供直接修改字符串的方法(和C++的std::string类似)</p></li><li><p>Java支持类似C语言的格式化输出<br><em>System.out.prin<strong>t</strong>(“%8.2f”, x);</em><br>或<br><em>String message = String.format(“Hello, %s”, name);</em></p></li><li><p>Java中没用 <em>goto</em> 语句, 但有可以带标签的 <em>break</em> 语句, 实现从内存循环跳出</p></li><li><p>Java<strong>没有</strong>提供运算符重载功能</p></li><li><p>Java中声明数组可以这样写<br>int[ ] a //Java style<br>或<br>int a[ ] //C++ style</p></li><li><p>Java中有类似C++11提供的 <em>for range</em> 循环, 即Java中的 <em>for each</em> 循环, 但后者由于只能传值, 所以是<strong>只读的</strong></p></li><li><p>Java中的对象变量类似于C++中对象的指针, 仅仅是引用一个对象</p></li><li><p>Java中不需要显式地如C++中用 <em>const</em> 关键字标注 accessor method</p></li><li><p>数组进行deep copy需要使用Arrays类的copyOf方法</p></li><li><p>Java实际上没有像C中的多维数组, 只有一维数组, 多维数组可以被理解为数组的数组</p></li><li><p>C++中类的implement可以写在类外, 但在Java中, 方法必须在类内部实现</p></li><li><p>和C++类似, Java的静态方法是一种不能向对象实施操作的方法, 即不传this</p></li><li><p>Java总是采用按值传递</p></li><li><p>可能是我在学C++时没仔细想, 返回类型并不属于函数signature的一部分</p></li><li><p>Java中构造方法里成员的默认值:<br>数值-&gt;0<br>boolean-&gt;false<br>对象引用-&gt;null (不是C++里大写的NULL)</p></li><li><p>类似C++, Java也有default constructor, 也只有在没有主动写任何构造方法时才会合成</p></li><li><p>Java类可以直接赋初始值(当然C++11也可啦)</p></li><li><p>Java中类不需要显示析构器, 对象用完可以用close方法清理</p></li><li><p>使用包(package)的主要原因是保证类名的唯一性, 一定程度上类似于C++的命名空间<br>习惯上以公司域名逆序为包名, 如: com.xyy.www</p></li><li><p>我要访问另一个包里的东西<br>第一种:类似C++里的命名空间+作用域解析运算符, 在类前写完整包名: java,util.Date today …<br>第二种:用import语句(不类似于include语句, 有分号)(可以使用*导入一些层级下的所有类)<br>(如果访问修饰符非public, 则类只能在定义的包内使用, 不能import)</p></li><li><p>我要把类放入包类:<br>需将package语句放在源文件开头(也在import之前)<br><em>e.g. package com.xyy;</em><br>如果无package语句, 则文件中的类就被放到default package中</p></li><li><p>对于Java中的类, 不像C++, 如果没写pulic或private或protected, 则默认设为包可见</p></li><li><p>Java与C++定义继承类的方式很像, 但Java用关键字 <em>extends</em><br><em>e.g. class Manager extends Employee{}</em></p></li><li><p>要调用父类方法, 可以用<strong>关键字</strong> <em>super</em> <br><em>e.g. super.getMoney( );</em><br>但 <em>super</em> 不类似于 <em>this</em> ,它只是关键字<br>但两者都可以用来调用对应类的方法, 包括构造方法</p></li><li><p>Java默认为dynamic binding, 我把Java里的类方法, 不包括构造方法, 都理解为类似C++的虚函数</p></li><li><p>在Java中如果不希望一个方法有 <em>virtual</em> 特征, 可以标记为 <em>final</em></p></li><li><p>Java里不支持多重继承</p></li><li><p>和C++声明抽象类的方法不同, Java使用关键字 <em>abstract</em> <br>类声明要写: <em>e.g. <strong>abstract</strong> class Person{}</em><br>虚方法也要写: <em>e.g. public <strong>abstract</strong> String getString( )</em></p></li><li><p>Java中protected部分,对所有子类及<strong>同一个包内的其他类</strong>都可见<br>因此安全性比C++差</p></li><li><p>Object类是Java中所有类的祖先.但不需要显式地写extends啥啥的<br>在Java中,只有primitive types不是对象</p></li><li><p>有时需要将primitive type转换为对象, 基本每种基本类型都有一个与之对应的wrapper(包装器?)<br>—————————————————————-<br>int-&gt;Integer<br>long-&gt;Long<br>float-&gt;Float<br>double-&gt;Double<br>short-&gt;Short<br>byte-&gt;Byte<br>———————–以上的超类是Number———–</p><p>character-&gt;Character<br>void-&gt;Void<br>boolean-&gt;Boolean<br>—————————————————————-<br>一旦构造了包装器, 里面的值是 <em>final</em> 的<br>当有调用如 list.add(3);<br>这里等价于 list.add(Integer.valueOf(3))<br>这里称作<strong>autoboxing(自动装箱)</strong><br>而类似地, 将一个Integer对象赋给一个int时, 也会有自动拆箱</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>A New Post</title>
    <link href="/2020/06/26/A-New-Post/"/>
    <url>/2020/06/26/A-New-Post/</url>
    
    <content type="html"><![CDATA[<h1 id="A-New-Post"><a href="#A-New-Post" class="headerlink" title="A New Post"></a>A New Post</h1><p>wowow, 这是这里的第一份post哎!</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
